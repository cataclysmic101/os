
installations 
sudo apt-get install libcurl4-openssl-dev
sudo apt update
sudo apt install curl
sudo apt-get install libsqlite3-dev


how to run 
gcc -g -o web_scraper web_scraper.c -lcurl -lpthread -lsqlite3
./web_scraper


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#include <ctype.h>
#include <curl/curl.h>
#include <sqlite3.h>

#define BUFFER_SIZE 1024
#define MAX_SENTENCES 100
#define NUM_READERS 3
#define NUM_WRITERS 2

// Shared buffer structure
typedef struct {
    char data[BUFFER_SIZE];
    int sentiment_score;
} ContentItem;

// Global variables
ContentItem buffer[MAX_SENTENCES];
long buffer_index = 0; // Use long for 64-bit systems
int analysis_complete = 0;

// Synchronization primitives
sem_t mutex, empty, full;

// Sentiment analysis dictionary
struct {
    char *word;
    int score;
} sentiment_dict[] = {
    {"good", 1},
    {"great", 2},
    {"excellent", 2},
    {"bad", -1},
    {"poor", -2},
    {"terrible", -2},
    {NULL, 0}
};

// Callback function for libcurl to write response data
size_t write_callback(void *contents, size_t size, size_t nmemb, void *userp) {
    size_t total_size = size * nmemb;
    strncpy((char *)userp, (char *)contents, total_size);
    ((char *)userp)[total_size - 1] = '\0'; // Ensure null-termination
    return total_size;
}

// Function to extract text from HTML content using basic string operations
char *extract_text_from_html(const char *html_content) {
    char *text = malloc(BUFFER_SIZE);
    if (!text) return NULL;
    memset(text, 0, BUFFER_SIZE);
    const char *ptr = html_content;
    const char *end = ptr + strlen(html_content);

    while (ptr < end && strlen(text) < BUFFER_SIZE - 1) {
        // Skip HTML tags
        if (*ptr == '<') {
            while (ptr < end && *ptr != '>') {
                ptr++;
            }
            ptr++; // Skip the '>' character
        } else {
            // Copy text content until next tag or buffer limit
            while (ptr < end && *ptr != '<' && strlen(text) < BUFFER_SIZE - 1) {
                strncat(text, ptr, 1);
                ptr++;
            }
        }
    }

    // Remove extra whitespace
    char *clean_text = malloc(BUFFER_SIZE);
    if (!clean_text) {
        free(text);
        return NULL;
    }
    memset(clean_text, 0, BUFFER_SIZE);
    char *src = text;
    char *dst = clean_text;

    while (*src && dst < clean_text + BUFFER_SIZE - 1) {
        if (!isspace((unsigned char)*src) || (dst > clean_text && !isspace((unsigned char)dst[-1]))) {
            *dst++ = *src;
        }
        src++;
    }
    *dst = '\0'; // Ensure null-termination

    free(text);
    return clean_text;
}

// Calculate sentiment score for a piece of text
int analyze_sentiment(const char *text) {
    int score = 0;
    char *text_copy = strdup(text);
    if (!text_copy) return 0;
    char *word = strtok(text_copy, " .,!?");

    while (word != NULL && word[0] != '\0') {
        // Convert word to lowercase for comparison
        for (int i = 0; word[i]; i++) {
            word[i] = tolower(word[i]);
        }

        // Compare with sentiment dictionary
        for (int i = 0; sentiment_dict[i].word != NULL; i++) {
            if (strcmp(word, sentiment_dict[i].word) == 0) {
                score += sentiment_dict[i].score;
                break;
            }
        }
        word = strtok(NULL, " .,!?");
    }

    free(text_copy);
    return score;
}

sqlite3 *db;

// Initialize database connection
void connect_db() {
    if (sqlite3_open("sentiment_analysis.db", &db)) {
        fprintf(stderr, "Can't open database: %s\n", sqlite3_errmsg(db));
        exit(1);
    }
}

// Setup database
void setup_db() {
    connect_db();

    const char *sql_create_table = "CREATE TABLE IF NOT EXISTS sentiment_analysis ("
                                   "id INTEGER PRIMARY KEY AUTOINCREMENT, "
                                   "content TEXT, "
                                   "sentiment_score INTEGER);";
    sqlite3_stmt *stmt;
    if (sqlite3_prepare_v2(db, sql_create_table, -1, &stmt, 0) == SQLITE_OK) {
        sqlite3_step(stmt);
        sqlite3_finalize(stmt);
    } else {
        fprintf(stderr, "Failed to create table: %s\n", sqlite3_errmsg(db));
        exit(1);
    }

    sqlite3_close(db);
}

// Producer thread function (Web Scraper)
void *producer(void *arg) {
    CURL *curl;
    CURLcode res;
    char *url = "https://medium.com/the-tech-collective/ios-ci-cd-with-azure-devops-automate-your-release-process-ea1f91147710";
    char html_content[BUFFER_SIZE];

    curl_global_init(CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init();

    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, url);
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
        curl_easy_setopt(curl, CURLOPT_WRITEDATA, html_content);
        curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);

        res = curl_easy_perform(curl);

        if (res != CURLE_OK) {
            fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
        } else {
            char *text_content = extract_text_from_html(html_content);
            if (text_content) {
                connect_db();

                const char *sql_insert = "INSERT INTO sentiment_analysis (content, sentiment_score) VALUES (?, ?)";
                sqlite3_stmt *stmt;
                if (sqlite3_prepare_v2(db, sql_insert, -1, &stmt, 0) == SQLITE_OK) {
                    sqlite3_bind_text(stmt, 1, text_content, strlen(text_content), SQLITE_STATIC);
                    sqlite3_bind_int(stmt, 2, 0);

                    if (sqlite3_step(stmt) != SQLITE_DONE) {
                        fprintf(stderr, "Failed to insert data: %s\n", sqlite3_errmsg(db));
                    }

                    sqlite3_finalize(stmt);
                } else {
                    fprintf(stderr, "Failed to prepare statement: %s\n", sqlite3_errmsg(db));
                }

                free(text_content); // Free the allocated memory
                sqlite3_close(db);
            }
        }

        curl_easy_cleanup(curl);
    }

    analysis_complete = 1;
    return NULL;
}

// Consumer thread function (Sentiment Analyzer)
void *consumer(void *arg) {
    connect_db();

    const char *sql_select = "SELECT id, content FROM sentiment_analysis WHERE sentiment_score IS NULL";
    sqlite3_stmt *stmt;
    if (sqlite3_prepare_v2(db, sql_select, -1, &stmt, 0) == SQLITE_OK) {
        while (sqlite3_step(stmt) == SQLITE_ROW) {
            int id = sqlite3_column_int(stmt, 0);
            const unsigned char *content = sqlite3_column_text(stmt, 1);

            int score = analyze_sentiment((const char *)content);

            const char *sql_update = "UPDATE sentiment_analysis SET sentiment_score = ? WHERE id = ?";
            sqlite3_stmt *update_stmt;
            if (sqlite3_prepare_v2(db, sql_update, -1, &update_stmt, 0) == SQLITE_OK) {
                sqlite3_bind_int(update_stmt, 1, score);
                sqlite3_bind_int(update_stmt, 2, id);

                if (sqlite3_step(update_stmt) != SQLITE_DONE) {
                    fprintf(stderr, "Failed to update data: %s\n", sqlite3_errmsg(db));
                }

                sqlite3_finalize(update_stmt);
            } else {
                fprintf(stderr, "Failed to prepare update statement: %s\n", sqlite3_errmsg(db));
            }
        }
        sqlite3_finalize(stmt);
    } else {
        fprintf(stderr, "Failed to prepare select statement: %s\n", sqlite3_errmsg(db));
    }

    sqlite3_close(db);
    return NULL;
}

// Reader thread function
void *reader(void *arg) {
    connect_db();

    const char *sql_select = "SELECT content, sentiment_score FROM sentiment_analysis";
    sqlite3_stmt *stmt;
    if (sqlite3_prepare_v2(db, sql_select, -1, &stmt, 0) == SQLITE_OK) {
        FILE *output_file = fopen("output.txt", "a");
        if (!output_file) {
            perror("Failed to open output file for appending");
            sqlite3_finalize(stmt);
            sqlite3_close(db);
            return NULL;
        }

        while (sqlite3_step(stmt) == SQLITE_ROW) {
            const unsigned char *content = sqlite3_column_text(stmt, 0);
            int score = sqlite3_column_int(stmt, 1);

            fprintf(output_file, "\nReader %ld reading:\n", (long)arg);
            fprintf(output_file, "Content: %s\n", content);
            fprintf(output_file, "Sentiment Score: %d\n", score);
            fflush(output_file);
        }

        fclose(output_file);
        sqlite3_finalize(stmt);
    } else {
        fprintf(stderr, "Failed to prepare select statement: %s\n", sqlite3_errmsg(db));
    }

    sqlite3_close(db);
    return NULL;
}

int main() {
    setup_db();

    pthread_t producer_thread;
    pthread_t consumer_thread;
    pthread_t reader_threads[NUM_READERS];

    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    for (int i = 0; i < NUM_READERS; i++) {
        pthread_create(&reader_threads[i], NULL, reader, (void *)(long)i);
    }

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(reader_threads[i], NULL);
    }

    return 0;
}
